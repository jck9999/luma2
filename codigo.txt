nome cpf data de nascimento
criar end point pra cadastrar e listar 

estou usando letras minusculas

senha do banco de dados:atem12345
porta para escultar 5432


package com.trabalho.crm.controler;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
 
import com.trabalho.crm.model.Cliente;
import com.trabalho.crm.repository.ClienteRepository;

@RestController
@RequestMapping("/clientes")
public class ClienteControler {

	@Autowired
	private ClienteRepository clienteRepository;
	
	
	
	@GetMapping
	public List<Cliente> ListarClientes() {
		return clienteRepository.findAll();
		
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente CadastrarCliente(@RequestBody Cliente cliente) {
		return clienteRepository.save(cliente);
		
	}
		
}

-----------------------------------------------------------------------------------
package com.trabalho.crm.model;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import com.fasterxml.jackson.annotation.JsonFormat;

import lombok.Data;

@Data
@Entity
public class Cliente {
   
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long id;
	
	
	@Column(nullable = false )
	public String nome;
	
	@Column(nullable = false )
	public String cpf;
	
	@Column(nullable = false )
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy")
	public Date data_nascimento;
	
	@Column(nullable = false )
	public int fone;
	 
	
	public BigDecimal limite_credito;
	
//	public Long getId() {
//		return id;
//	}
//
//
//	public void setId(Long id) {
//		this.id = id;
//	}
//
//
//	public String getNome() {
//		return nome;
//	}
//	 
//	public void setNome(String novoNome) {
//		this.nome = novoNome;
//	}
//	
//	
//	public String getCpf() {
//        return cpf;
//	}
//	
//	public void setCpf(String novoCpf) {
//		this.cpf = novoCpf;
//	}
//	
//	
//	public Date getDatadenascimento() {
//		return this.Datadenascimento;
//	}
//
//
//	public void setDatadenascimento(Date datadenascimento) {
//		this.Datadenascimento = datadenascimento;
//	}
//
//
//	public int getFone() {
//		return this.fone;
//	}
//
//
//	public void setFone(int fone) {
//		this.fone = fone;
//	}
//	
//	
//
//	public BigDecimal getLimiteDeCredito() {
//		 return this.LimiteDeCredito;
//	}
//
//	public void setLimiteDeCredito(BigDecimal novoLimite) {
//		this.LimiteDeCredito = novoLimite;
//	}
//
////	@Override
////	public int hashCode() {
////		final int prime = 31;
////		int result = 1;
////		result = prime * result + ((id == null) ? 0 : id.hashCode());
////		return result;
////	}
////
////
////	@Override
////	public boolean equals(Object obj) {
////		if (this == obj)
////			return true;
////		if (obj == null)
////			return false;
////		if (getClass() != obj.getClass())
////			return false;
////		Cliente other = (Cliente) obj;
////		if (id == null) {
////			if (other.id != null)
////				return false;
////		} else if (!id.equals(other.id))
////			return false;
////		return true;
////	}
//
//
//	
//	
//	
//	
//	
//	
}
----------------------------------------------------------------------------
package com.trabalho.crm.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.crm.model.Cliente;

@Repository
public interface ClienteRepository extends JpaRepository<Cliente, Long> {

}
-----------------------------------------------------------
spring.jpa.show-sql=true
#spring.jpa.database=POSTGRESQL
#spring.datasource.platform=postgres
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.database.driverClassName=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/priview
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#server.port=5432
